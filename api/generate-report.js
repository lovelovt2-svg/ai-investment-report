// ====================================
// ÏµúÏ¢Ö ÏïàÏ†Ñ Î≤ÑÏ†Ñ - Ï£ºÍ∞Ä ÏóÜÏñ¥ÎèÑ ÏôÑÎ≤Ω!
// ÌååÏùºÎ™Ö: api/generate-report.js
// ====================================

export default async function handler(req, res) {
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'POST, OPTIONS');
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type');

  if (req.method === 'OPTIONS') return res.status(200).end();
  if (req.method !== 'POST') return res.status(405).json({ error: 'Method not allowed' });

  try {
    const { searchQuery, additionalInfo } = req.body;

    console.log('üîç Í≤ÄÏÉâÏñ¥:', searchQuery);

    const topicType = determineTopicType(searchQuery);
    console.log('üìä Ï£ºÏ†ú ÌÉÄÏûÖ:', topicType);

    const newsData = await searchNaverNews(searchQuery, 20);
    console.log('üì∞ Îâ¥Ïä§:', newsData.length, 'Í±¥');

    // Ï£ºÍ∞ÄÎäî ÏãúÎèÑÎßå ÌïòÍ≥† Ïã§Ìå®Ìï¥ÎèÑ Í≥ÑÏÜç!
    let stockData = null;
    if (topicType === 'company') {
      stockData = await tryGetStockData(searchQuery);
      console.log('üìà Ï£ºÍ∞Ä:', stockData ? '‚úÖ' : '‚ö†Ô∏è (Îâ¥Ïä§Î°ú ÏßÑÌñâ)');
    }

    const sentiment = analyzeSentiment(newsData);
    const prompt = buildStrictPrompt(searchQuery, newsData, stockData, topicType, sentiment, additionalInfo);

    console.log('ü§ñ Claude Ìò∏Ï∂ú');

    const response = await fetch('https://api.anthropic.com/v1/messages', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'x-api-key': process.env.ANTHROPIC_API_KEY,
        'anthropic-version': '2023-06-01'
      },
      body: JSON.stringify({
        model: 'claude-sonnet-4-20250514',
        max_tokens: 4000,
        temperature: 0.7,
        messages: [{ role: 'user', content: prompt }]
      })
    });

    if (!response.ok) throw new Error(`Claude: ${response.status}`);

    const data = await response.json();

    return res.status(200).json({
      success: true,
      report: data.content[0].text,
      metadata: {
        topicType: topicType,
        newsCount: newsData.length,
        sentiment: sentiment,
        hasStockData: !!stockData,
        stockData: stockData,
        timestamp: new Date().toISOString(),
        dataQuality: calculateQuality(newsData.length, !!stockData),
        sources: newsData.slice(0, 5).map(n => ({
          title: n.title,
          date: n.pubDate
        }))
      }
    });

  } catch (error) {
    console.error('‚ùå Ïò§Î•ò:', error);
    return res.status(500).json({ success: false, error: error.message });
  }
}

// Ï£ºÍ∞Ä Ï°∞Ìöå ÏãúÎèÑ (Ïó¨Îü¨ API ÏãúÎèÑ)
async function tryGetStockData(query) {
  const ticker = getKoreanStockTicker(query);
  if (!ticker || !process.env.RAPIDAPI_KEY) return null;

  // 1. YH Finance ÏãúÎèÑ
  try {
    const data = await getYHFinanceData(ticker);
    if (data) return data;
  } catch (error) {
    console.log('YH Finance Ïã§Ìå®:', error.message);
  }

  // 2. Yahoo Finance15 ÏãúÎèÑ
  try {
    const data = await getYahooFinance15Data(ticker);
    if (data) return data;
  } catch (error) {
    console.log('Yahoo Finance15 Ïã§Ìå®:', error.message);
  }

  // Î™®Îëê Ïã§Ìå®Ìï¥ÎèÑ null Î∞òÌôò (Í≥ÑÏÜç ÏßÑÌñâ)
  return null;
}

// YH Finance API
async function getYHFinanceData(ticker) {
  const response = await fetch(
    `https://yh-finance.p.rapidapi.com/stock/v2/get-summary?symbol=${ticker}`,
    {
      headers: {
        'X-RapidAPI-Key': process.env.RAPIDAPI_KEY,
        'X-RapidAPI-Host': 'yh-finance.p.rapidapi.com'
      },
      timeout: 5000
    }
  );

  if (!response.ok) return null;

  const data = await response.json();
  const price = data.price || {};
  const summaryDetail = data.summaryDetail || {};
  const financialData = data.financialData || {};

  return {
    currentPrice: price.regularMarketPrice?.raw || null,
    targetPrice: financialData.targetMeanPrice?.raw || null,
    pe: summaryDetail.trailingPE?.raw || null,
    marketCap: price.marketCap?.raw || null
  };
}

// Yahoo Finance15 API
async function getYahooFinance15Data(ticker) {
  const response = await fetch(
    `https://yahoo-finance15.p.rapidapi.com/api/v1/markets/stock/quotes?ticker=${ticker}`,
    {
      headers: {
        'X-RapidAPI-Key': process.env.RAPIDAPI_KEY,
        'X-RapidAPI-Host': 'yahoo-finance15.p.rapidapi.com'
      },
      timeout: 5000
    }
  );

  if (!response.ok) return null;

  const data = await response.json();
  const stock = data.body?.[0] || data.body?.quote || data.body || null;
  if (!stock) return null;

  return {
    currentPrice: stock.regularMarketPrice || stock.price || null,
    targetPrice: stock.targetMeanPrice || null,
    pe: stock.trailingPE || stock.pe || null,
    marketCap: stock.marketCap || null
  };
}

function determineTopicType(query) {
  const q = query.toLowerCase();
  const economy = ['Í≤ΩÏ†ú', 'Í∏àÎ¶¨', 'ÌôòÏú®', 'gdp', 'Î¨ºÍ∞Ä', 'Ïù∏Ìîå', 'ÏÑ±Ïû•Î•†', 'Í≤ΩÍ∏∞'];
  const sector = ['ÏÇ∞ÏóÖ', 'ÏóÖÏ¢Ö', 'ÏÑπÌÑ∞', 'ÏãúÏû•'];
  const company = ['Ï†ÑÏûê', 'Î∞îÏù¥Ïò§', 'Ï†úÏïΩ', 'ÏùÄÌñâ', 'Î∞òÎèÑÏ≤¥', 'ÏûêÎèôÏ∞®', 'ÏÇºÏÑ±', 'lg', 'sk'];

  for (const w of economy) {
    if (q.includes(w)) {
      let hasComp = false;
      for (const c of company) if (q.includes(c)) { hasComp = true; break; }
      if (!hasComp) return 'economy';
    }
  }
  for (const w of sector) if (q.includes(w)) return 'sector';
  for (const w of company) if (q.includes(w)) return 'company';
  return 'economy';
}

function buildStrictPrompt(query, news, stock, type, sentiment, additional) {
  const newsText = news.map((n, i) => `[${i+1}] ${n.title}\n${n.description}`).join('\n\n');
  let stockSection = '';
  if (stock && type === 'company') {
    stockSection = `\n# üìä Ï£ºÍ∞Ä\nÌòÑÏû¨Í∞Ä: ${stock.currentPrice?.toLocaleString() || 'N/A'}Ïõê\n${stock.targetPrice ? `Î™©ÌëúÍ∞Ä: ${stock.targetPrice.toLocaleString()}Ïõê\n` : ''}${stock.pe ? `PER: ${stock.pe.toFixed(1)}Î∞∞\n` : ''}`;
  }
  const header = `# Îâ¥Ïä§ (${news.length}Í±¥)\n${newsText}${stockSection}\nÍ∞êÏÑ±: ${sentiment}\n${additional ? `\nÏ∂îÍ∞Ä: ${additional}\n` : ''}`;

  if (type === 'economy') {
    return `Í≤ΩÏ†ú Ï†ÑÎ¨∏Í∞Ä "${query}" Î∂ÑÏÑù.\n\n${header}\n\n‚ö†Ô∏è SWOT/BUY/Î™©ÌëúÏ£ºÍ∞Ä Í∏àÏßÄ\n\n## 1. ÏöîÏïΩ (3-4Î¨∏Ïû•)\n## 2. ÌïµÏã¨ ÏßÄÌëú\n- GDP: [%]\n- Î¨ºÍ∞Ä: [%]\n- Í∏àÎ¶¨: [%]\n## 3. Í≤ΩÏ†ú ÏÉÅÌô©\n### ÌòÑÌô©\n- Ï†ê 1\n- Ï†ê 2\n### Ï†ïÏ±Ö\n- Ï†ê 1\n- Ï†ê 2\n### Ï†ÑÎßù\n- Ï†ê 1\n- Ï†ê 2\n## 4. Í≤ΩÏ†ú Î¶¨Ïä§ÌÅ¨\n- Î¶¨Ïä§ÌÅ¨ 1\n- Î¶¨Ïä§ÌÅ¨ 2\n- Î¶¨Ïä§ÌÅ¨ 3\n## 5. Ï†ÑÎßù ÏöîÏïΩ\nÏ†ÑÎßù: Í∏çÏ†ï/Ï§ëÎ¶Ω/Î∂ÄÏ†ï\nÍ∏∞Í∞Ñ: 6-12Í∞úÏõî\nÏòÅÌñ•: [2-3Î¨∏Ïû•]\n## 6. Ìà¨ÏûêÏûê Í¥ÄÏ†ê\n[3Î¨∏Ïû•]`;
  }
  else if (type === 'sector') {
    return `ÏÇ∞ÏóÖ Ï†ÑÎ¨∏Í∞Ä "${query}" Î∂ÑÏÑù.\n\n${header}\n\n‚ö†Ô∏è SWOT/BUY/Î™©ÌëúÏ£ºÍ∞Ä Í∏àÏßÄ\n\n## 1. ÏöîÏïΩ (3-4Î¨∏Ïû•)\n## 2. ÌïµÏã¨ Ìä∏Î†åÎìú\n- Ìä∏Î†åÎìú 1\n- Ìä∏Î†åÎìú 2\n- Ìä∏Î†åÎìú 3\n## 3. ÏÇ∞ÏóÖ Î∂ÑÏÑù\n### ÌòÑÌô©\n- Ï†ê 1\n- Ï†ê 2\n### Í∏∞ÏóÖ\n- Ï†ê 1\n- Ï†ê 2\n### ÏÑ±Ïû•\n- Ï†ê 1\n- Ï†ê 2\n## 4. ÏÇ∞ÏóÖ Î¶¨Ïä§ÌÅ¨\n- Î¶¨Ïä§ÌÅ¨ 1\n- Î¶¨Ïä§ÌÅ¨ 2\n- Î¶¨Ïä§ÌÅ¨ 3\n## 5. ÏÇ∞ÏóÖ Ï†ÑÎßù\nÏ†ÑÎßù: Í∏çÏ†ï/Ï§ëÎ¶Ω/Î∂ÄÏ†ï\nÍ∏∞Í∞Ñ: 12Í∞úÏõî\nÎß§Î†•ÎèÑ: [2-3Î¨∏Ïû•]\n## 6. Ìà¨ÏûêÏûê Í¥ÄÏ†ê\n[3Î¨∏Ïû•]`;
  }
  else {
    const priceInfo = stock?.currentPrice ? `${stock.currentPrice.toLocaleString()}Ïõê` : '[Ï∂îÏ†ï]Ïõê';
    const targetInfo = stock?.targetPrice ? `${stock.targetPrice.toLocaleString()}Ïõê` : '[Ï∂îÏ†ï]Ïõê';
    return `Ï¶ùÍ∂å Ïï†ÎÑêÎ¶¨Ïä§Ìä∏ "${query}" Î∂ÑÏÑù.\n\n${header}\n\n## 1. ÏöîÏïΩ (3-4Î¨∏Ïû•)\n## 2. ÌïµÏã¨ Ìè¨Ïù∏Ìä∏\n- Ìè¨Ïù∏Ìä∏ 1\n- Ìè¨Ïù∏Ìä∏ 2\n- Ìè¨Ïù∏Ìä∏ 3\n## 3. SWOT\n### Í∞ïÏ†ê\n- Ï†ê 1\n- Ï†ê 2\n### ÏïΩÏ†ê\n- Ï†ê 1\n- Ï†ê 2\n### Í∏∞Ìöå\n- Ï†ê 1\n- Ï†ê 2\n### ÏúÑÌòë\n- Ï†ê 1\n- Ï†ê 2\n## 4. Î¶¨Ïä§ÌÅ¨\n- Î¶¨Ïä§ÌÅ¨ 1\n- Î¶¨Ïä§ÌÅ¨ 2\n- Î¶¨Ïä§ÌÅ¨ 3\n## 5. Ìà¨Ïûê ÏùòÍ≤¨\nÎì±Í∏â: BUY/HOLD/SELL\nÎ™©ÌëúÍ∞Ä: ${targetInfo}\nÌòÑÏû¨Í∞Ä: ${priceInfo}\nÍ∏∞Í∞Ñ: 12Í∞úÏõî\nÍ∑ºÍ±∞: [2Î¨∏Ïû•]\n## 6. Ìà¨ÏûêÏûê Í¥ÄÏ†ê\n[3Î¨∏Ïû•]`;
  }
}

function getKoreanStockTicker(query) {
  const map = {
    'ÏÇºÏÑ±Ï†ÑÏûê': '005930.KS', 'ÏÇºÏÑ±': '005930.KS',
    'SKÌïòÏù¥ÎãâÏä§': '000660.KS', 'ÌïòÏù¥ÎãâÏä§': '000660.KS',
    'ÎÑ§Ïù¥Î≤Ñ': '035420.KS', 'Ïπ¥Ïπ¥Ïò§': '035720.KS',
    'ÌòÑÎåÄÏ∞®': '005380.KS', 'LGÏ†ÑÏûê': '066570.KS',
    'ÏÖÄÌä∏Î¶¨Ïò®': '068270.KS'
  };
  for (const [k, v] of Object.entries(map)) if (query.includes(k)) return v;
  return null;
}

async function searchNaverNews(query, max = 20) {
  const ID = process.env.NAVER_CLIENT_ID;
  const SECRET = process.env.NAVER_CLIENT_SECRET;
  if (!ID || !SECRET) return [{ title: `${query} Îâ¥Ïä§`, description: 'Î∂ÑÏÑù', pubDate: new Date().toISOString() }];
  try {
    const res = await fetch(
      `https://openapi.naver.com/v1/search/news.json?query=${encodeURIComponent(query)}&display=${max}&sort=date`,
      { headers: { 'X-Naver-Client-Id': ID, 'X-Naver-Client-Secret': SECRET } }
    );
    if (!res.ok) throw new Error(`${res.status}`);
    const data = await res.json();
    const threeDays = new Date(Date.now() - 3*24*60*60*1000);
    return (data.items || [])
      .filter(i => new Date(i.pubDate) >= threeDays)
      .map(i => ({ title: clean(i.title), description: clean(i.description), pubDate: i.pubDate }))
      .slice(0, max);
  } catch (error) {
    return [{ title: `${query} Îâ¥Ïä§`, description: 'Î∂ÑÏÑù', pubDate: new Date().toISOString() }];
  }
}

function clean(text) {
  return text.replace(/<[^>]*>/g, '').replace(/&[^;]+;/g, ' ').trim();
}

function analyzeSentiment(news) {
  const pos = ['ÏÉÅÏäπ', 'Ìò∏Ï°∞', 'Ï¶ùÍ∞Ä', 'Í∞úÏÑ†', 'ÏÑ±Ïû•'];
  const neg = ['ÌïòÎùΩ', 'Î∂ÄÏßÑ', 'Í∞êÏÜå', 'ÏïÖÌôî', 'ÏúÑÏ∂ï'];
  let p = 0, n = 0;
  news.forEach(i => {
    const t = i.title + i.description;
    pos.forEach(w => { if (t.includes(w)) p++; });
    neg.forEach(w => { if (t.includes(w)) n++; });
  });
  if (p > n * 1.5) return 'Í∏çÏ†ïÏ†Å';
  if (n > p * 1.5) return 'Î∂ÄÏ†ïÏ†Å';
  return 'Ï§ëÎ¶ΩÏ†Å';
}

function calculateQuality(newsCount, hasStock) {
  const base = Math.min(newsCount * 4, 80);
  const bonus = hasStock ? 10 : 0;
  return Math.min(base + bonus, 95);
}
